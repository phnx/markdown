plot(postage$Year, postage$Price, type='s',
main='US Postage Rates for Letters, First Ounce, 1991-2010',
xlab='Year', ylab='Postage Rate (Dollars)', cex.main=0.7)
plot(postage$Year, postage$Price, type='s',
main='US Postage Rates for Letters, First Ounce, 1991-2010',
xlab='Year', ylab='Postage Rate (Dollars)', cex.main=0.7, cex.lab=0.7)
plot(postage$Year, postage$Price, type='s',
main='US Postage Rates for Letters, First Ounce, 1991-2010',
xlab='Year', ylab='Postage Rate (Dollars)', cex.main=0.7, cex.lab=0.7)
postage <- read.csv('http://datasets.flowingdata.com/us-postage.csv', sep=',', header=TRUE)
plot(postage$Year, postage$Price, type='s',
main='US Postage Rates for Letters, First Ounce, 1991-2010',
xlab='Year', ylab='Postage Rate (Dollars)', cex.main=0.8, cex.lab=0.8)
plot(postage$Year, postage$Price, type='s',
main='US Postage Rates for Letters, First Ounce, 1991-2010',
xlab='Year', ylab='Postage Rate (Dollars)', cex.main=0.8, cex.lab=0.8, ylim = c(0,2008))
plot(postage$Year, postage$Price, type='s',
main='US Postage Rates for Letters, First Ounce, 1991-2010',
xlab='Year', ylab='Postage Rate (Dollars)', cex.main=0.8, cex.lab=0.8, ylim = c(1991,2008))
plot(postage$Year, postage$Price, type='s',
main='US Postage Rates for Letters, First Ounce, 1991-2010',
xlab='Year', ylab='Postage Rate (Dollars)', cex.main=0.8, cex.lab=0.8, xlim = c(1991,2008))
plot(postage$Year, postage$Price, type='s',
main='US Postage Rates for Letters, First Ounce, 1991-2010',
xlab='Year', ylab='Postage Rate (Dollars)', cex.main=0.8, cex.lab=0.8, xlim = c(1991,2009))
plot(postage$Year, postage$Price, type='s',
main='US Postage Rates for Letters, First Ounce, 1991-2010',
xlab='Year', ylab='Postage Rate (Dollars)', cex.main=0.8, cex.lab=0.8, xlim = c(1991,2010))
plot(postage$Year, postage$Price, type='s',
main='US Postage Rates for Letters, First Ounce, 1991-2010',
xlab='Year', ylab='Postage Rate (Dollars)', cex.main=0.8, cex.lab=0.8, xlim = c(1991,2009))
Titanic
Titanic[["Male"]]
Titanic[["Male"],1]
Titanic[["Male"][1]
Titanic[,,Age = Adult]
Titanic[,,'Age = Adult']
Titanic[,,'Age = Adult', 'Survived = Yes']
Titanic[, , Age = Adult, Survived = Yes]
Titanic[, , Age = 'Adult', Survived = 'Yes']
Titanic[, , Age = 'Adult', Survived = 'Yes'][1]
Titanic[, , Age = 'Adult', Survived = 'Yes']['Male']
Titanic[, , Age = 'Adult', Survived = 'Yes']
x <- Titanic[, , Age = 'Adult', Survived = 'Yes']
x
x[1,1]
x[1,2]
x[1,'Male']
x[1:4,'Male']
countries.raw <- c("south africa", "ivory coast", "kosovo"
, "albania", "ethiopia", "saudi arabia"
, "egypt", "tunisia", "iraq", "lebanon"
, "syria")
# countries <- c("South Africa", "ivory coast", "kosovo", "egypt")
c.code <- rep("", length(countries))
my.colors <- colorRampPalette(c("blue", "green"))(n = length(c.code))
library(rwormap)
library(rworldmap)
install.packages('rworldmap')
library(rworldmap)
countries.raw <- c("south africa", "ivory coast", "kosovo"
, "albania", "ethiopia", "saudi arabia"
, "egypt", "tunisia", "iraq", "lebanon"
, "syria")
# countries <- c("South Africa", "ivory coast", "kosovo", "egypt")
c.code <- rep("", length(countries))
my.colors <- colorRampPalette(c("blue", "green"))(n = length(c.code))
countries.raw <- c("south africa", "ivory coast", "kosovo"
, "albania", "ethiopia", "saudi arabia"
, "egypt", "tunisia", "iraq", "lebanon"
, "syria")
c.code <- rep("", length(countries))
countries
countries.raw
c.code <- rep("", length(countries.raw))
my.colors <- colorRampPalette(c("blue", "green"))(n = length(c.code))
my.colors
countries <- c("south africa", "ivory coast", "kosovo"
, "albania", "ethiopia", "saudi arabia"
, "egypt", "tunisia", "iraq", "lebanon"
, "syria")
c.code <- rep("", length(countries))
my.colors <- colorRampPalette(c("blue", "green"))(n = length(c.code))
c.code
colorRampPalette(c("blue", "green"))
?colorRampPalette
my.colors <- colorRampPalette(c("blue", "green"))
my.colors
my.colors <- colorRampPalette(c("blue", "green"))(n = length(c.code))
my.colors <- colorRampPalette(c("blue", "green"))(n = length(c.code))
for (i in 1:length(countries)) {
c.codes[i] <- rwmGetISO3(countries[i])
}
for (i in 1:length(countries)) {
c.codes[i] <- rwmGetISO3(countries[i])
}
c.codes <- rep("", length(countries))
for (i in 1:length(countries)) {
c.codes[i] <- rwmGetISO3(countries[i])
}
c.codes
i <- 1
print(paste(i, countries[i], c.codes[i]))
for (i in 1:length(countries)) {
# i <- 1
c.codes[i] <- rwmGetISO3(countries[i])
print(paste(i, countries[i], c.codes[i]))
}
malDF <- data.frame(country = c.code, labels = countries)
malDF <- data.frame(country = c.code, labels = countries)
malMap <- joinCountryData2Map(malDF, joinCode = 'ISO3',
nameJoinColumn = 'country')
mapCountryData(malMap, nameColumnToPlot = 'labels',
catMethod = 'categorical',
#colourPalette = my.colors,
oceanCol = 'cornflowerblue',
borderCol = 'black',
missingCountryCol = gray(.95),
mapTitle = 'Jeffers\'')
mapCountryData(malMap, nameColumnToPlot = 'labels',
catMethod = 'categorical',
colourPalette = my.colors,
oceanCol = 'cornflowerblue',
borderCol = 'black',
missingCountryCol = gray(.95),
mapTitle = 'Jeffers\'')
malMap
F <- data.frame(country = c.codes, labels = countries)
malMap <- joinCountryData2Map(malDF, joinCode = 'ISO3',
nameJoinColumn = 'country')
malDF <- data.frame(country = c.codes, labels = countries)
malMap <- joinCountryData2Map(malDF, joinCode = 'ISO3',
nameJoinColumn = 'country')
mapCountryData(malMap, nameColumnToPlot = 'labels',
catMethod = 'categorical',
#colourPalette = my.colors,
oceanCol = 'cornflowerblue',
borderCol = 'black',
missingCountryCol = gray(.95),
mapTitle = 'Jeffers\'')
mapCountryData(malMap, nameColumnToPlot = 'labels',
catMethod = 'categorical',
colourPalette = my.colors,
oceanCol = 'cornflowerblue',
borderCol = 'black',
missingCountryCol = gray(.95),
mapTitle = 'Jeffers\'')
mapCountryData(malMap, nameColumnToPlot = 'labels',
#catMethod = 'categorical',
colourPalette = my.colors,
oceanCol = 'cornflowerblue',
borderCol = 'black',
missingCountryCol = gray(.95),
mapTitle = 'Jeffers\'')
col.vec <- c(1, 3, 3, 6, 8, 8, 6, 9, 11, 10, 3, 11, 11)
col.vec <- c(1, 3, 6, 8, 8, 6, 9, 11, 10, 3, 11)
col.vec <- c(1, 3, 6, 8, 8, 6, 9, 11, 10, 3, 11)
mapCountryData(malMap, nameColumnToPlot = 'labels',
catMethod = 'categorical',
colourPalette = my.colors,
oceanCol = 'cornflowerblue',
borderCol = 'black',
missingCountryCol = gray(.95),
mapTitle = 'Jeffers\'')
my.colors[col.vec]
c.codes
mapCountryData(malMap, nameColumnToPlot = 'labels',
catMethod = 'categorical',
#colourPalette = my.colors,
colourPalette = my.colors[col.vec],
oceanCol = 'cornflowerblue',
borderCol = 'black',
missingCountryCol = gray(.95),
mapTitle = 'Jeffers\'')
col.vec <- c(1, 1,1,1,1,1,1,1,1,1,11)
my.colors[col.vec]
c.codes
mapCountryData(malMap, nameColumnToPlot = 'labels',
catMethod = 'categorical',
#colourPalette = my.colors,
colourPalette = my.colors[col.vec],
oceanCol = 'cornflowerblue',
borderCol = 'black',
missingCountryCol = gray(.95),
mapTitle = 'Jeffers\'')
col.vec <- c(1, 2,1,1,1,1,1,1,1,1,11)
my.colors[col.vec]
c.codes
mapCountryData(malMap, nameColumnToPlot = 'labels',
catMethod = 'categorical',
#colourPalette = my.colors,
colourPalette = my.colors[col.vec],
oceanCol = 'cornflowerblue',
borderCol = 'black',
missingCountryCol = gray(.95),
mapTitle = 'Jeffers\'')
col.vec <- c(1, 8,1,1,1,1,1,1,1,1,11)
my.colors[col.vec]
c.codes
mapCountryData(malMap, nameColumnToPlot = 'labels',
catMethod = 'categorical',
#colourPalette = my.colors,
colourPalette = my.colors[col.vec],
oceanCol = 'cornflowerblue',
borderCol = 'black',
missingCountryCol = gray(.95),
mapTitle = 'Jeffers\'')
my.colors
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv')
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = T, stringsAsFactors = F, quote = '\"')
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = T, stringsAsFactors = F, quote = '\"')
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = T, stringsAsFactors = F)
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = T, stringsAsFactors = F, quote = '\"', fileEncoding="UCS-2LE")
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = T, stringsAsFactors = F, quote = '\"', fileEncoding="UCS-2LE")
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
df <- read.csv("Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv",
sep=",", header = TRUE, stringsAsFactors = FALSE, quote = "\"")
df <- read.csv("Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv",
sep=",", header = TRUE, stringsAsFactors = FALSE, quote = "\"")
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"', fileEncoding="UTF-8")
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"', fileEncoding="UTF-8")
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
#
# Viz-A-Thon 1
# Week 7
# Author: Wachiraphan Charoenwet
# Stanford Mass Shootings in America, courtesy of the Stanford Geospatial Center and Stanford Libraries
#
df <- read.csv('Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
# remove last NA line
df <- head(df, -1)
# first visualization - beside barplot, comparing total number of victims and fatalities by year groups
#  clean up year
year_list <- as.Date(df$Date, "%m/%d/%Y")
df$Year <- as.numeric(format(year_list, "%Y"))
# ranging dimensions
range_agrs <- c('< 1973', '1973 - 1982', '1983 - 1992', '1993 - 2002', '2003 - 2012', '>= 2013');
new_df <- data.frame()
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year < 1973, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year < 1973, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 1973 & df$Year < 1983, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 1973 & df$Year < 1983, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 1983 & df$Year < 1993, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 1983 & df$Year < 1993, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 1993 & df$Year < 2003, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 1993 & df$Year < 2003, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 2003 & df$Year < 2013, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 2003 & df$Year < 2013, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 2013, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 2013, 'Total.Number.of.Fatalities'])
))
bp <- barplot(rbind(new_df$Total.Victims, new_df$Total.Fatalities), beside = TRUE,
names.arg = range_agrs, legend = c('Total Victims Injured', 'Total Fatalities'), main = 'Total Victims Injured and Fatalities by Decade')
text(bp, 100, rbind(new_df$Total.Victims, new_df$Total.Fatalities), cex=0.7)
# second visualization - stacked barplot, mental illness history and victim group
# incidents by victim group
tb <- table(df$History.of.Mental.Illness...General,df$Targeted.Victim.s.General)
barplot(tb, las=2,
legend.text = c('No Mental Illness History', 'Unknow Mental Illness History', 'Mental Illness History'),
main = 'Mental Illness History and Victim Group')
#
# Viz-A-Thon 1
# Week 7
# Author: Wachiraphan Charoenwet
# Stanford Mass Shootings in America, courtesy of the Stanford Geospatial Center and Stanford Libraries
#
df <- read.csv('Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
# remove last NA line
df <- head(df, -1)
# first visualization - beside barplot, comparing total number of victims and fatalities by year groups
#  clean up year
year_list <- as.Date(df$Date, "%m/%d/%Y")
df$Year <- as.numeric(format(year_list, "%Y"))
# ranging dimensions
range_agrs <- c('< 1973', '1973 - 1982', '1983 - 1992', '1993 - 2002', '2003 - 2012', '>= 2013');
new_df <- data.frame()
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year < 1973, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year < 1973, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 1973 & df$Year < 1983, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 1973 & df$Year < 1983, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 1983 & df$Year < 1993, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 1983 & df$Year < 1993, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 1993 & df$Year < 2003, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 1993 & df$Year < 2003, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 2003 & df$Year < 2013, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 2003 & df$Year < 2013, 'Total.Number.of.Fatalities'])
))
new_df <- rbind(new_df, data.frame('Total Victims Injured' = sum(df[df$Year >= 2013, 'Number.of.Victims.Injured']),
'Total Fatalities' = sum(df[df$Year >= 2013, 'Total.Number.of.Fatalities'])
))
bp <- barplot(rbind(new_df$Total.Victims, new_df$Total.Fatalities), beside = TRUE,
names.arg = range_agrs, legend = c('Total Victims Injured', 'Total Fatalities'), main = 'Total Victims Injured and Fatalities by Decade')
text(bp, 100, rbind(new_df$Total.Victims, new_df$Total.Fatalities), cex=0.7)
# second visualization - stacked barplot, mental illness history and victim group
# incidents by victim group
tb <- table(df$History.of.Mental.Illness...General,df$Targeted.Victim.s.General)
barplot(tb, las=2,
legend.text = c('No Mental Illness History', 'Unknow Mental Illness History', 'Mental Illness History'),
main = 'Mental Illness History and Victim Group')
df <- read.csv('Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
# remove last NA line
df <- head(df, -1)
# incidents by victim group
tb <- table(df$History.of.Mental.Illness...General,df$Targeted.Victim.s.General)
barplot(tb, las=2,
legend.text = c('No Mental Illness History', 'Unknow Mental Illness History', 'Mental Illness History'),
main = 'Mental Illness History and Victim Group')
tb <- table(df$History.of.Mental.Illness...General,df$Targeted.Victim.s.General)
df <- read.csv('Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
# remove last NA line
df <- head(df, -1)
tb <- table(df$History.of.Mental.Illness...General,df$Targeted.Victim.s.General)
df$Targeted.Victim.s.General
df
df
df <- read.csv('Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
df <- head(df, -1)
tb <- table(df$History.of.Mental.Illness...General, df$Targeted.Victim.s.General)
barplot(tb, las=2,
legend.text = c('No Mental Illness History', 'Unknow Mental Illness History', 'Mental Illness History'),
main = 'Mental Illness History and Victim Group')
f$Targeted.Victim.s.General
df$Targeted.Victim.s.General
tb
df <- read.csv('Documents/IM Vault/IST 719/Exercise/In-Class/Week 7/Stanford_MSA_Database_for_release_09222015.csv',
sep=',', header = TRUE, stringsAsFactors = FALSE, quote = '\"')
# remove last NA line
df <- head(df, -1)
tb <- table(df$History.of.Mental.Illness...General, df$Targeted.Victim.s.General)
tb
barplot(tb, las=2,
legend.text = c('No Mental Illness History', 'Unknow Mental Illness History', 'Mental Illness History'),
main = 'Mental Illness History and Victim Group')
plot(df$Place.Type, df$Day.of.Week)
plot(c(1,2,3,4,5), c(10,4,234,234,223))
plot(c('a','b','c'), c('c','d','d'))
plot(c(1:3), c('c','d','d'))
plot(c('c','d','d'), c(1:3))
load("~/Documents/IM Vault/IST 719/Poster/Sample Dataset/Sleeping/Loaded-dataset.RData")
all_states <- map_data("state")
load("~/Documents/IM Vault/IST 719/Poster/Sample Dataset/Sleeping/Loaded-dataset.RData")
map('state')
library(maps)
library(mapdata)
map('state')
https://gregorybooma.wordpress.com/2013/01/05/map-of-the-united-states-including-alaska-and-hawaii-with-r/*
View(all_states)
library(maps)
```
map('state')
#convert HR to Min -> precision
df2014$sleptim1_min <- df2014$sleptim1 *60
state_avg <- aggregate(df2014[, 'sleptim1_min'], list(df2014$State), mean)
state_avg <- state_avg[state_avg$Group.1!='DC', ]
state_avg <- state_avg[state_avg$Group.1!='AK', ]
# start here for map plotting - find workaround to add HI and AK
# values <- runif(length(state.abb),0,1)
range <- (max(state_avg$x) - min(state_avg$x))  #expanding value frame -> 23 minutes different
values <- (state_avg$x - min(state_avg$x)) * 2.5
values <- (state_avg$x - min(state_avg$x)) / range  # 0...1
values <- (state_avg$x - min(state_avg$x))
valueLabel <- c(1:length(values))
for (i in 1:length(values)) {
if(values[i]<5) valueLabel[i] <- .2
else if(values[i]<10) valueLabel[i] <- .4
else if(values[i]<15) valueLabel[i] <- .6
else if(values[i]<20) valueLabel[i] <- .8
else valueLabel[i] <- 1
}
names(valueLabel) <- state_avg$Group.1
names(values) <- state_avg$Group.1
tmp <- map('state',plot=FALSE,namesonly=TRUE )
#matching (after adjusting using gsub and tolower)
tmp <- match(gsub('(:.*)','',tmp),c(tolower(state_avg$Group.1)))
#convert your numbers to grey-scale and selct using the match
map('state',fill=TRUE,col=rgb(colorRamp(c('pink','darkblue'))(valueLabel), max=255)[tmp])
#state average - Give full state's name for state map
#convert HR to Min -> precision
df2014$sleptim1_min <- df2014$sleptim1 *60
state_avg <- aggregate(df2014[, 'sleptim1_min'], list(df2014$State), mean)
state_avg <- state_avg[state_avg$Group.1!='DC', ]
state_avg <- state_avg[state_avg$Group.1!='AK', ]
# start here for map plotting - find workaround to add HI and AK
# values <- runif(length(state.abb),0,1)
range <- (max(state_avg$x) - min(state_avg$x))  #expanding value frame -> 23 minutes different
values <- (state_avg$x - min(state_avg$x)) * 2.5
values <- (state_avg$x - min(state_avg$x)) / range  # 0...1
values <- (state_avg$x - min(state_avg$x))
valueLabel <- c(1:length(values))
for (i in 1:length(values)) {
if(values[i]<5) valueLabel[i] <- .2
else if(values[i]<10) valueLabel[i] <- .4
else if(values[i]<15) valueLabel[i] <- .6
else if(values[i]<20) valueLabel[i] <- .8
else valueLabel[i] <- 1
}
names(valueLabel) <- state_avg$Group.1
names(values) <- state_avg$Group.1
head(valueLabel)
library(shiny)
install.packages('shiny')
library(shiny)
*http://www.cdc.gov/sleep/data_statistics.html*
detach("package:stats", unload=TRUE)
setwd('~/Documents/IM Vault/IST 719/Poster/Sample Dataset/Sleeping/')
load("~/Documents/IM Vault/IST 719/Poster/Sample Dataset/Sleeping/Loaded-dataset.RData")
sex_age_group_avg <- aggregate(df2014[, 'sleptim1_min'], list(sex = df2014$sex, age = df2014$x.age.g), mean)
sex_age_group_avg$x <- round(sex_age_group_avg$x,0)
sex_age_group_avg$sex <- as.factor(sex_age_group_avg$sex)
sex_age_group_avg$age <- as.factor(sex_age_group_avg$age)
ggplot(sex_age_group_avg, aes(x=age, y=x, fill=sex)) +
geom_bar(position="dodge", stat="identity") +
coord_cartesian(ylim=c(360, 480))
A <- sample(letters[1:3], size=100, replace=TRUE)
B <- sample(LETTERS[1:4], size=100, replace=TRUE)
A.table <- table(A)
barplot(A.table)
A.B.table <- table(A, B)
barplot(A.B.table)
barplot(A.B.table, col=c('brown', 'tan', 'gold'),
beside = TRUE, border='white', main='Beside Bar Chart',
xlab = 'some categorical variables',
ylab = 'frequency')
A
barplot(A.table)
A.B.table <- table(A, B)
A.B.table <- table(A, B)
barplot(A.B.table)
barplot(A.B.table, col=c('brown', 'tan', 'gold'),
beside = TRUE, border='white', main='Beside Bar Chart',
xlab = 'some categorical variables',
ylab = 'frequency')
A.B.table
support <- sample(letters[1:3], size=5, replace=TRUE)
generosity <- sample(LETTERS[1:4], size=5, replace=TRUE)
support
support <- (sample.int(101,size=100,replace=TRUE)-1)/100
support
support <- (sample.int(101,size=10,replace=TRUE)-1)/100
support
c('a':'k')
countries <- letters[1:10]
generosity <- (sample.int(101,size=10,replace=TRUE)-1)/100
countries
countries <- letters[1:10]
dtable <- matrix(c(70,120,65,140),ncol=2,byrow=TRUE)
dtable
barplot(dtable,
beside = TRUE,main='Beside Bar Chart' )
dtable <- matrix(c(support,generosity),ncol=(lengthcountries),byrow=TRUE)
dtable <- matrix(c(support,generosity),ncol=length(countries),byrow=TRUE)
dtable
colnames(dtable, countries)
colnames(dtable) <- countries
dtable
barplot(dtable,
beside = TRUE,main='Beside Bar Chart' )
support_vec <- (sample.int(101,size=10,replace=TRUE)-1)/100
generosity_vec <- (sample.int(101,size=10,replace=TRUE)-1)/100
countrie_vec <- letters[1:10]
dtable <- matrix(c(support_vec,generosity_vec),ncol=length(countrie_vec),byrow=TRUE)
colnames(dtable) <- countrie_vec
barplot(dtable,
beside = TRUE,main='Beside Bar Chart' )
support_vec <- (sample.int(101,size=10,replace=TRUE)-1)/100
generosity_vec <- (sample.int(101,size=10,replace=TRUE)-1)/100
countrie_vec <- letters[1:10]
dtable <- matrix(c(support_vec,generosity_vec),ncol=length(countrie_vec),byrow=TRUE)
colnames(dtable) <- countrie_vec
barplot(dtable,
beside = TRUE,main='Beside Bar Chart' )
support_vec <- (sample.int(101,size=10,replace=TRUE)-1)/100
generosity_vec <- (sample.int(101,size=10,replace=TRUE)-1)/100
countrie_vec <- letters[1:10]
dtable <- matrix(c(support_vec,generosity_vec),ncol=length(countrie_vec),byrow=TRUE)
colnames(dtable) <- countrie_vec
barplot(dtable,
beside = TRUE,main='Beside Bar Chart' )
support_vec <- (sample.int(101,size=10,replace=TRUE)-1)/100
generosity_vec <- (sample.int(101,size=10,replace=TRUE)-1)/100
countrie_vec <- letters[1:10]
dtable <- matrix(c(support_vec,generosity_vec),ncol=length(countrie_vec),byrow=TRUE)
colnames(dtable) <- countrie_vec
barplot(dtable,
beside = TRUE,main='Beside Bar Chart' )
